module ex8_top(CLOCK_50,KEY,LEDR,HEX0,HEX1,HEX2,HEX3,HEX4);

	input CLOCK_50;
	input [3:3] KEY;


	output [9:0] LEDR;
	output [6:0] HEX0,HEX1,HEX2,HEX3,HEX4;

// ---- submodule interface

	wire tick_ms;//every 1ms 
	wire tick_hs;//every 0.5s
	
	reg time_out;//is 1 if countdown finish
	
	reg en_lfsr;//enable LFSR
	reg [7:1] rand;//random number generated by LFSR
	reg [6:0] displayrand;
	
	reg start_delay;//start delay

	
	clkdiv_16 div50000 (CLOCK_50,tick_ms,16'd50000);
	clkdiv_16 div500 (tick_ms,tick_hs,16'd500);
	
// ---- submodule FSM
	parameter OFF=2'b0;
	parameter LIGHTUP=2'b1;
	parameter WAITDELAY=2'b10;
	
	reg[1:0] state;
	initial state=2'b0;

	reg [9:0] ledbuff;
	
	always @ (posedge tick_ms)
		case (state)
			OFF: if (~KEY[3]) state<=LIGHTUP;
				else begin
					ledbuff<=10'b0;
					start_delay<=1'b0;
					en_lfsr<=1'b0;
				end
			LIGHTUP: if (ledbuff[0]==1'b1) begin state<=WAITDELAY; start_delay<=1'b1; end
				else begin
					if (tick_hs)
						ledbuff<={1'b1,ledbuff[9:1]};
					
					en_lfsr<=1'b1;
				end
			WAITDELAY: if (time_out==1'b1) state<=OFF;
				else begin
					start_delay<=1'b1;
					en_lfsr<=1'b0;
				end
				
					
		endcase

// ---- end FSM


// ---- submodule LFSR
	initial rand=7'b1;
	
	always @ (posedge tick_ms)
		if (en_lfsr)
			rand<={rand[6:1],rand[1]^rand[7]};
	
// ---- end LFSR


// ---- submodule delay counter
	reg [13:0] countdown;
	reg counter_running;

	
	always @ (posedge tick_ms)
		if (start_delay)
			if(countdown==14'b0)
				time_out<=1'b1;
			else begin
				countdown=countdown-14'b1;
				time_out<=1'b0;
			end
		else begin
			time_out<=1'b0;
			countdown<={rand[7:1],7'd250};
			displayrand<=rand[7:1];
		end
// ---- end submodule


// ---- submodule led
		assign LEDR=ledbuff;

// ---- end submodule

// ---- submodule hexdisplay
	wire [3:0] bcd0,bcd1,bcd2,bcd3,bcd4;
	wire [6:0] s0,s1,s2,s3,s4,s5;

	wire [19:0] segbus;
	
	bin2bcd_16 B2B ({2'b0,displayrand[6:0],7'd250} , bcd0, bcd1, bcd2, bcd3, bcd4);
	hex_2_7seg SEG0 (.in(bcd0),.out(s0));
	hex_2_7seg SEG1 (.in(bcd1),.out(s1));
	hex_2_7seg SEG2 (.in(bcd2),.out(s2));
	hex_2_7seg SEG3 (.in(bcd3),.out(s3));
	hex_2_7seg SEG4 (.in(bcd4),.out(s4));
	
	
	assign HEX0=(state!=OFF)? s0 : 7'h7F;
	assign HEX1=(state!=OFF)? s1 : 7'h7F;
	assign HEX2=(state!=OFF)? s2 : 7'h7F;
	assign HEX3=(state!=OFF)? s3 : 7'h7F;
	assign HEX4=(state!=OFF)? s4 : 7'h7F;


// ---- end submodule


endmodule
